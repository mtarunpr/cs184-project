"""
THIS FILE IS AUTO-GENERATED BY `scraper.py`

DO NOT EDIT IT MANUALLY (unless you have good reason ;) )
"""

raw_tactics = [
    (0, "+"),
    (1, "=>"),
    (2, "abstract"),
    (3, "abstract"),
    (4, "absurd"),
    (5, "apply"),
    (6, "apply"),
    (7, "assert"),
    (8, "assert_fails"),
    (9, "assert_succeeds"),
    (10, "assumption"),
    (11, "auto"),
    (12, "autoapply"),
    (13, "autorewrite"),
    (14, "autounfold"),
    (15, "autounfold_one"),
    (16, "btauto"),
    (17, "bullet"),
    (18, "by"),
    (19, "case"),
    (20, "case"),
    (21, "case_eq"),
    (22, "casetype"),
    (23, "cbn"),
    (24, "cbv"),
    (25, "change"),
    (26, "change_no_check"),
    (27, "classical_left"),
    (28, "classical_right"),
    (29, "clear"),
    (30, "clear dependent"),
    (31, "clearbody"),
    (32, "cofix"),
    (33, "compare"),
    (34, "compute"),
    (35, "congr"),
    (36, "congruence"),
    (37, "constr_eq"),
    (38, "constr_eq_nounivs"),
    (39, "constr_eq_strict"),
    (40, "constructor"),
    (41, "context"),
    (42, "contradict"),
    (43, "contradiction"),
    (44, "cut"),
    (45, "cutrewrite"),
    (46, "cycle"),
    (47, "debug auto"),
    (48, "debug eauto"),
    (49, "debug trivial"),
    (50, "decide"),
    (51, "decide equality"),
    (52, "decompose"),
    (53, "decompose record"),
    (54, "decompose sum"),
    (55, "dependent destruction"),
    (56, "dependent generalize_eqs"),
    (57, "dependent generalize_eqs_vars"),
    (58, "dependent induction"),
    (59, "dependent inversion"),
    (60, "dependent inversion_clear"),
    (61, "dependent rewrite"),
    (62, "dependent simple inversion"),
    (63, "destauto"),
    (64, "destruct"),
    (65, "dfs eauto"),
    (66, "dintuition"),
    (67, "discriminate"),
    (68, "do"),
    (69, "do"),
    (70, "done"),
    (71, "dtauto"),
    (72, "eapply"),
    (73, "eassert"),
    (74, "eassumption"),
    (75, "easy"),
    (76, "eauto"),
    (77, "ecase"),
    (78, "econstructor"),
    (79, "edestruct"),
    (80, "ediscriminate"),
    (81, "eelim"),
    (82, "eenough"),
    (83, "eexact"),
    (84, "eexists"),
    (85, "einduction"),
    (86, "einjection"),
    (87, "eintros"),
    (88, "eleft"),
    (89, "elim"),
    (90, "elim"),
    (91, "elimtype"),
    (92, "enough"),
    (93, "epose"),
    (94, "epose proof"),
    (95, "eremember"),
    (96, "erewrite"),
    (97, "eright"),
    (98, "eset"),
    (99, "esimplify_eq"),
    (100, "esplit"),
    (101, "etransitivity"),
    (102, "eval"),
    (103, "evar"),
    (104, "exact"),
    (105, "exact"),
    (106, "exact_no_check"),
    (107, "exactly_once"),
    (108, "exfalso"),
    (109, "exists"),
    (110, "f_equal"),
    (111, "fail"),
    (112, "field"),
    (113, "field_lookup"),
    (114, "field_simplify"),
    (115, "field_simplify_eq"),
    (116, "finish_timing"),
    (117, "first"),
    (118, "first"),
    (119, "first last"),
    (120, "firstorder"),
    (121, "fix"),
    (122, "fold"),
    (123, "fresh"),
    (124, "fun"),
    (125, "generalize"),
    (126, "generalize dependent"),
    (127, "generalize_eqs"),
    (128, "generalize_eqs_vars"),
    (129, "generally have"),
    (130, "gfail"),
    (131, "gintuition"),
    (132, "give_up"),
    (133, "guard"),
    (134, "has_evar"),
    (135, "have"),
    (136, "head_of_constr"),
    (137, "hnf"),
    (138, "idtac"),
    (139, "if-then-else"),
    (140, "in"),
    (141, "induction"),
    (142, "info_auto"),
    (143, "info_eauto"),
    (144, "info_trivial"),
    (145, "injection"),
    (146, "instantiate"),
    (147, "intro"),
    (148, "intros"),
    (149, "intros until"),
    (150, "intuition"),
    (151, "inversion"),
    (152, "inversion_clear"),
    (153, "inversion_sigma"),
    (154, "is_cofix"),
    (155, "is_const"),
    (156, "is_constructor"),
    (157, "is_evar"),
    (158, "is_fix"),
    (159, "is_ground"),
    (160, "is_ind"),
    (161, "is_proj"),
    (162, "is_var"),
    (163, "lapply"),
    (164, "last"),
    (165, "last first"),
    (166, "lazy"),
    (167, "lazy_match!"),
    (168, "lazy_match! goal"),
    (169, "lazymatch"),
    (170, "lazymatch goal"),
    (171, "left"),
    (172, "let"),
    (173, "lia"),
    (174, "lra"),
    (175, "ltac-seq"),
    (176, "match"),
    (177, "match"),
    (178, "match goal"),
    (179, "match!"),
    (180, "match! goal"),
    (181, "move"),
    (182, "move"),
    (183, "multi_match!"),
    (184, "multi_match! goal"),
    (185, "multimatch"),
    (186, "multimatch goal"),
    (187, "native_cast_no_check"),
    (188, "native_compute"),
    (189, "nia"),
    (190, "not_evar"),
    (191, "now"),
    (192, "now_show"),
    (193, "nra"),
    (194, "nsatz"),
    (195, "nsatz_compute"),
    (196, "numgoals"),
    (197, "once"),
    (198, "only"),
    (199, "optimize_heap"),
    (200, "over"),
    (201, "pattern"),
    (202, "pose"),
    (203, "pose"),
    (204, "pose proof"),
    (205, "progress"),
    (206, "protect_fv"),
    (207, "psatz"),
    (208, "rapply"),
    (209, "red"),
    (210, "refine"),
    (211, "reflexivity"),
    (212, "remember"),
    (213, "rename"),
    (214, "repeat"),
    (215, "replace"),
    (216, "reset ltac profile"),
    (217, "restart_timer"),
    (218, "revert"),
    (219, "revert dependent"),
    (220, "revgoals"),
    (221, "rewrite"),
    (222, "rewrite"),
    (223, "rewrite *"),
    (224, "rewrite_db"),
    (225, "rewrite_strat"),
    (226, "right"),
    (227, "ring"),
    (228, "ring_lookup"),
    (229, "ring_simplify"),
    (230, "rtauto"),
    (231, "set"),
    (232, "set"),
    (233, "setoid_etransitivity"),
    (234, "setoid_reflexivity"),
    (235, "setoid_replace"),
    (236, "setoid_rewrite"),
    (237, "setoid_symmetry"),
    (238, "setoid_transitivity"),
    (239, "shelve"),
    (240, "shelve_unifiable"),
    (241, "show ltac profile"),
    (242, "simpl"),
    (243, "simple apply"),
    (244, "simple congruence"),
    (245, "simple destruct"),
    (246, "simple eapply"),
    (247, "simple induction"),
    (248, "simple injection"),
    (249, "simple inversion"),
    (250, "simple subst"),
    (251, "simplify_eq"),
    (252, "solve"),
    (253, "solve_constraints"),
    (254, "specialize"),
    (255, "specialize_eqs"),
    (256, "split"),
    (257, "start ltac profiling"),
    (258, "stepl"),
    (259, "stepr"),
    (260, "stop ltac profiling"),
    (261, "subst"),
    (262, "substitute"),
    (263, "suff"),
    (264, "suffices"),
    (265, "swap"),
    (266, "symmetry"),
    (267, "tauto"),
    (268, "time"),
    (269, "time_constr"),
    (270, "timeout"),
    (271, "transitivity"),
    (272, "transparent_abstract"),
    (273, "trivial"),
    (274, "try"),
    (275, "tryif"),
    (276, "type of"),
    (277, "type_term"),
    (278, "typeclasses eauto"),
    (279, "under"),
    (280, "unfold"),
    (281, "unify"),
    (282, "unlock"),
    (283, "unshelve"),
    (284, "vm_cast_no_check"),
    (285, "vm_compute"),
    (286, "with_strategy"),
    (287, "without loss"),
    (288, "wlia"),
    (289, "wlog"),
    (290, "wlra_Q"),
    (291, "wnia"),
    (292, "wnra_Q"),
    (293, "wpsatz_Q"),
    (294, "wpsatz_Z"),
    (295, "wsos_Q"),
    (296, "wsos_Z"),
    (297, "xlia"),
    (298, "xlra_Q"),
    (299, "xlra_R"),
    (300, "xnia"),
    (301, "xnra_Q"),
    (302, "xnra_R"),
    (303, "xpsatz_Q"),
    (304, "xpsatz_R"),
    (305, "xpsatz_Z"),
    (306, "xsos_Q"),
    (307, "xsos_R"),
    (308, "xsos_Z"),
    (309, "zify"),
    (310, "zify_elim_let"),
    (311, "zify_iter_let"),
    (312, "zify_iter_specs"),
    (313, "zify_op"),
    (314, "zify_saturate"),
    (315, "{"),
    (316, "||"),
    (317, "}"),
]

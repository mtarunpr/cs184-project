"""
THIS FILE IS AUTO-GENERATED BY `scraper.py`

DO NOT EDIT IT MANUALLY (unless you have good reason ;) )
"""

raw_tactics = [
    (0, "+"),
    (1, "=>"),
    (2, "[ … | … | … ]"),
    (3, "[> … | … | … ]"),
    (4, "abstract"),
    (5, "abstract"),
    (6, "absurd"),
    (7, "admit"),
    (8, "apply"),
    (9, "apply"),
    (10, "assert"),
    (11, "assert_fails"),
    (12, "assert_succeeds"),
    (13, "assumption"),
    (14, "auto"),
    (15, "autoapply"),
    (16, "autorewrite"),
    (17, "autounfold"),
    (18, "autounfold_one"),
    (19, "btauto"),
    (20, "bullet"),
    (21, "by"),
    (22, "case"),
    (23, "case"),
    (24, "case_eq"),
    (25, "casetype"),
    (26, "cbn"),
    (27, "cbv"),
    (28, "change"),
    (29, "change_no_check"),
    (30, "classical_left"),
    (31, "classical_right"),
    (32, "clear"),
    (33, "clear dependent"),
    (34, "clearbody"),
    (35, "cofix"),
    (36, "compare"),
    (37, "compute"),
    (38, "congr"),
    (39, "congruence"),
    (40, "constr_eq"),
    (41, "constr_eq_nounivs"),
    (42, "constr_eq_strict"),
    (43, "constructor"),
    (44, "context"),
    (45, "contradict"),
    (46, "contradiction"),
    (47, "cut"),
    (48, "cutrewrite"),
    (49, "cycle"),
    (50, "debug auto"),
    (51, "debug eauto"),
    (52, "debug trivial"),
    (53, "decide"),
    (54, "decide equality"),
    (55, "decompose"),
    (56, "decompose record"),
    (57, "decompose sum"),
    (58, "dependent destruction"),
    (59, "dependent generalize_eqs"),
    (60, "dependent generalize_eqs_vars"),
    (61, "dependent induction"),
    (62, "dependent inversion"),
    (63, "dependent inversion_clear"),
    (64, "dependent rewrite"),
    (65, "dependent simple inversion"),
    (66, "destauto"),
    (67, "destruct"),
    (68, "dfs eauto"),
    (69, "dintuition"),
    (70, "discriminate"),
    (71, "do"),
    (72, "do"),
    (73, "done"),
    (74, "dtauto"),
    (75, "eapply"),
    (76, "eassert"),
    (77, "eassumption"),
    (78, "easy"),
    (79, "eauto"),
    (80, "ecase"),
    (81, "econstructor"),
    (82, "edestruct"),
    (83, "ediscriminate"),
    (84, "eelim"),
    (85, "eenough"),
    (86, "eexact"),
    (87, "eexists"),
    (88, "einduction"),
    (89, "einjection"),
    (90, "eintros"),
    (91, "eleft"),
    (92, "elim"),
    (93, "elim"),
    (94, "elimtype"),
    (95, "enough"),
    (96, "epose"),
    (97, "epose proof"),
    (98, "eremember"),
    (99, "erewrite"),
    (100, "eright"),
    (101, "eset"),
    (102, "esimplify_eq"),
    (103, "esplit"),
    (104, "etransitivity"),
    (105, "eval"),
    (106, "evar"),
    (107, "exact"),
    (108, "exact"),
    (109, "exact_no_check"),
    (110, "exactly_once"),
    (111, "exfalso"),
    (112, "exists"),
    (113, "f_equal"),
    (114, "fail"),
    (115, "field"),
    (116, "field_lookup"),
    (117, "field_simplify"),
    (118, "field_simplify_eq"),
    (119, "finish_timing"),
    (120, "first"),
    (121, "first"),
    (122, "first last"),
    (123, "firstorder"),
    (124, "fix"),
    (125, "fold"),
    (126, "fresh"),
    (127, "fun"),
    (128, "generalize"),
    (129, "generalize dependent"),
    (130, "generalize_eqs"),
    (131, "generalize_eqs_vars"),
    (132, "generally have"),
    (133, "gfail"),
    (134, "gintuition"),
    (135, "give_up"),
    (136, "guard"),
    (137, "has_evar"),
    (138, "have"),
    (139, "head_of_constr"),
    (140, "hnf"),
    (141, "idtac"),
    (142, "if-then-else"),
    (143, "in"),
    (144, "induction"),
    (145, "info_auto"),
    (146, "info_eauto"),
    (147, "info_trivial"),
    (148, "injection"),
    (149, "instantiate"),
    (150, "intro"),
    (151, "intros"),
    (152, "intros until"),
    (153, "intuition"),
    (154, "inversion"),
    (155, "inversion_clear"),
    (156, "inversion_sigma"),
    (157, "is_cofix"),
    (158, "is_const"),
    (159, "is_constructor"),
    (160, "is_evar"),
    (161, "is_fix"),
    (162, "is_ground"),
    (163, "is_ind"),
    (164, "is_proj"),
    (165, "is_var"),
    (166, "lapply"),
    (167, "last"),
    (168, "last first"),
    (169, "lazy"),
    (170, "lazy_match!"),
    (171, "lazy_match! goal"),
    (172, "lazymatch"),
    (173, "lazymatch goal"),
    (174, "left"),
    (175, "let"),
    (176, "lia"),
    (177, "lra"),
    (178, "ltac-seq"),
    (179, "match"),
    (180, "match"),
    (181, "match goal"),
    (182, "match!"),
    (183, "match! goal"),
    (184, "move"),
    (185, "move"),
    (186, "multi_match!"),
    (187, "multi_match! goal"),
    (188, "multimatch"),
    (189, "multimatch goal"),
    (190, "native_cast_no_check"),
    (191, "native_compute"),
    (192, "nia"),
    (193, "not_evar"),
    (194, "now"),
    (195, "now_show"),
    (196, "nra"),
    (197, "nsatz"),
    (198, "nsatz_compute"),
    (199, "numgoals"),
    (200, "once"),
    (201, "only"),
    (202, "optimize_heap"),
    (203, "over"),
    (204, "pattern"),
    (205, "pose"),
    (206, "pose"),
    (207, "pose proof"),
    (208, "progress"),
    (209, "protect_fv"),
    (210, "psatz"),
    (211, "rapply"),
    (212, "red"),
    (213, "refine"),
    (214, "reflexivity"),
    (215, "remember"),
    (216, "rename"),
    (217, "repeat"),
    (218, "replace"),
    (219, "reset ltac profile"),
    (220, "restart_timer"),
    (221, "revert"),
    (222, "revert dependent"),
    (223, "revgoals"),
    (224, "rewrite"),
    (225, "rewrite"),
    (226, "rewrite *"),
    (227, "rewrite_db"),
    (228, "rewrite_strat"),
    (229, "right"),
    (230, "ring"),
    (231, "ring_lookup"),
    (232, "ring_simplify"),
    (233, "rtauto"),
    (234, "set"),
    (235, "set"),
    (236, "setoid_etransitivity"),
    (237, "setoid_reflexivity"),
    (238, "setoid_replace"),
    (239, "setoid_rewrite"),
    (240, "setoid_symmetry"),
    (241, "setoid_transitivity"),
    (242, "shelve"),
    (243, "shelve_unifiable"),
    (244, "show ltac profile"),
    (245, "simpl"),
    (246, "simple apply"),
    (247, "simple congruence"),
    (248, "simple destruct"),
    (249, "simple eapply"),
    (250, "simple induction"),
    (251, "simple injection"),
    (252, "simple inversion"),
    (253, "simple subst"),
    (254, "simplify_eq"),
    (255, "solve"),
    (256, "solve_constraints"),
    (257, "specialize"),
    (258, "specialize_eqs"),
    (259, "split"),
    (260, "start ltac profiling"),
    (261, "stepl"),
    (262, "stepr"),
    (263, "stop ltac profiling"),
    (264, "subst"),
    (265, "substitute"),
    (266, "suff"),
    (267, "suffices"),
    (268, "swap"),
    (269, "symmetry"),
    (270, "tauto"),
    (271, "time"),
    (272, "time_constr"),
    (273, "timeout"),
    (274, "transitivity"),
    (275, "transparent_abstract"),
    (276, "trivial"),
    (277, "try"),
    (278, "tryif"),
    (279, "type of"),
    (280, "type_term"),
    (281, "typeclasses eauto"),
    (282, "under"),
    (283, "unfold"),
    (284, "unify"),
    (285, "unlock"),
    (286, "unshelve"),
    (287, "vm_cast_no_check"),
    (288, "vm_compute"),
    (289, "with_strategy"),
    (290, "without loss"),
    (291, "wlia"),
    (292, "wlog"),
    (293, "wlra_Q"),
    (294, "wnia"),
    (295, "wnra_Q"),
    (296, "wpsatz_Q"),
    (297, "wpsatz_Z"),
    (298, "wsos_Q"),
    (299, "wsos_Z"),
    (300, "xlia"),
    (301, "xlra_Q"),
    (302, "xlra_R"),
    (303, "xnia"),
    (304, "xnra_Q"),
    (305, "xnra_R"),
    (306, "xpsatz_Q"),
    (307, "xpsatz_R"),
    (308, "xpsatz_Z"),
    (309, "xsos_Q"),
    (310, "xsos_R"),
    (311, "xsos_Z"),
    (312, "zify"),
    (313, "zify_elim_let"),
    (314, "zify_iter_let"),
    (315, "zify_iter_specs"),
    (316, "zify_op"),
    (317, "zify_saturate"),
    (318, "{"),
    (319, "||"),
    (320, "}"),
    (321, "… : …"),
    (322, "… : …"),
]
